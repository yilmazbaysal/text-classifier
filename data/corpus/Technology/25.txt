Red Hat Gives JBoss AMQ a Makeover

Red Hat on Thursday announced JBoss AMQ 7, a messaging platform upgrade that enhances its overall performance and improves client availability for developers.

JBoss AMQ is a lightweight, standards-based open source platform designed to enable real-time communication between applications, services, devices and the Internet of Things. It is based on the upstream Apache ActiveMQ and Apache Qpid community projects.

JBoss AMQ serves as the messaging foundation for Red Hat JBoss Fuse. It provides real-time, distributed messaging capabilities needed to support an agile integration approach for modern application development, according to Red Hat.

The upgrade be available for download by members of the Red Hat developers community this summer, the company said.

Technology plays a central role in enabling greater levels of interconnection and scalability, noted Mike Piech, general manager of Red Hat JBoss Middleware.

"With its new reactive messaging architecture, JBoss AMQ is well-suited to support the applications and infrastructure that can help deliver those experiences," he said.

What It Does

"Messaging," in this case, relates to commands passing between servers and client devices. Broadly speaking, this kind of technology is called "message-oriented middleware," or "MOM," said Charles King, principal analyst at Pund-IT.

"This is purely aimed at easing the lives of enterprise developers whose organizations are Red Hat customers," he told LinuxInsider. "This is especially true for those focused on IoT implementations, since AMQ 7 can open up data in embedded devices used in IoT sensors to inspection, analysis and control."

Red Hat's AMQ 7 broker component is based on the Apache ActiveMQ Artemis project. The update adds support for APIs and protocols by adding new client libraries, including Java Message Service 2.0, JavaScript, C++, .Net and Python.

Upgrade Details

JBoss AMQ 7 brings technology enhancements to three core components: broker, client and interconnect router.

The JBoss AMQ broker manages connections, queues, topics and subscriptions. It uses innovations from Artemis to provide an asynchronous internal architecture. This increases performance and scalability and enables the system to handle more concurrent connections and achieve greater message throughput.

JBoss AMQ 7 Client supports popular messaging APIs and protocols by adding new client libraries. These include Java Message Service 2.0, JavaScript, C++, .Net and Python, along with existing support for the popular open protocols MQTT and AMQP.

JBoss AMQ 7 now offers broad interoperability across the IT landscape, which lets it open up data in embedded devices to inspection, analysis and control.

The new interconnect router in JBoss AMQ 7 enables users to create a network of messaging paths spanning data centers, cloud services and geographic zones. This component serves as the backbone for distributed messaging. It provides redundancy, traffic optimization, and more secure and reliable connectivity.

Key Improvements

Two key enhancements in JBoss AMQ 7 are a new reactive implementation and interconnect features, said David Codelli, product marketing lead for JBoss AMQ at Red Hat.

The first is an asynchronous (reactive) server component, so it no longer ties up resources for each idle connection. This will make all their interactions with messaging more performant, both in terms of throughput and latency.

"It also means that more developers can use the system since some asynchronous threading models can't use traditional brokers," Codelli told LinuxInsider.

The second key enhancement is the addition of numerous benefits provided by the new interconnect feature, especially the ability to use one local service.

"Developers can connect to one local service to have access to a stream -- sending or receiving -- of data that can travel throughout their organization," Codelli said, "crossing security boundaries, geographic boundaries and public clouds without the developer having to configure anything."

Targeted Users

The messaging platform will better meet the needs of engineering teams who share data in a loosely coupled, asynchronous fashion. Similarly, operations teams will be better able to share feeds of critical data with every department in a company, even if it has a global reach.

"Think giant retailers that need to propagate product defect data as quickly and efficiently as possible," suggested Codelli.

Two more intended benefactors of the application upgrade are financial services software developers, or IT managers dealing with transportation and logistics tasks.

The interconnect feature is ideal for things like payment gateways. It is also more helpful to architects who have to contend with large amounts of disparate data, such as delays and outages, flowing over a wide area.

Cross-Platform Appeal

One of the appeals of MOM technologies and Apache ActiveMQ is that its message modules can be distributed across multiple heterogeneous platforms, Pund-IT's King said. It effectively insulates applications developers from having to be experts in enterprise operating systems and network interfaces.

"A cross-platform value proposition is central to what Red Hat is doing," King observed. "Overall, this new update to AMQ 7 is likely to be welcomed by numerous customers, especially those focused on distributed applications and IoT."